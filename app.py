import streamlit as st
import pandas as pd
import numpy as np
from xgboost import XGBClassifier
from sklearn.preprocessing import StandardScaler
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import seaborn as sns

# ========== Section 1: Risk Prediction Dashboard ==========
@st.cache_data
def load_model():
    model = XGBClassifier(max_depth=4, n_estimators=30, use_label_encoder=False, eval_metric='mlogloss', random_state=42)
    df = pd.DataFrame({
        'Age': np.random.randint(18, 70, 500),
        'Job': np.random.randint(0, 4, 500),
        'Credit amount': np.random.randint(1000, 20000, 500),
        'Duration': np.random.randint(6, 48, 500),
    })
    df['DebtPerMonth'] = df['Credit amount'] / df['Duration']
    df['IsYoung'] = (df['Age'] < 30).astype(int)
    df['HasSaving'] = np.random.randint(0, 2, 500)
    def create_risk(row):
        if row['Credit amount'] > 10000 and row['Duration'] > 24:
            return 2
        elif row['Credit amount'] > 5000:
            return 1
        else:
            return 0
    y = df.apply(create_risk, axis=1)
    X = df[['Age', 'Job', 'Credit amount', 'Duration', 'DebtPerMonth', 'IsYoung', 'HasSaving']]
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    model.fit(X_scaled, y)
    return model, scaler

model, scaler = load_model()

st.title("üìä Risk Management Dashboard")
section = st.sidebar.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Dashboard:", ["üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", "üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏° Purpose"])

if section == "üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•":
    st.header("üîÆ Risk Level Prediction")
    age = st.slider("‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)", 18, 70, 30)
    job = st.selectbox("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏≤‡∏ä‡∏µ‡∏û (0-3)", [0, 1, 2, 3])
    credit = st.number_input("‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ (‡∏ö‡∏≤‡∏ó)", min_value=1000, max_value=20000, value=8000)
    duration = st.number_input("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≠‡∏ô (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)", min_value=6, max_value=60, value=24)
    is_young = 1 if age < 30 else 0
    has_saving = st.selectbox("‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏°‡∏µ"])
    has_saving = 1 if has_saving == "‡∏°‡∏µ" else 0

    X_input = pd.DataFrame([{
        'Age': age,
        'Job': job,
        'Credit amount': credit,
        'Duration': duration,
        'DebtPerMonth': credit / duration,
        'IsYoung': is_young,
        'HasSaving': has_saving,
    }])

    X_input_scaled = scaler.transform(X_input)
    pred = model.predict(X_input_scaled)[0]
    pred_proba = model.predict_proba(X_input_scaled)[0]

    risk_label = ['Low', 'Medium', 'High']
    st.subheader("üîé ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")
    st.metric(label="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á", value=risk_label[pred])
    st.progress(float(pred_proba[pred]))
    st.write("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•:")
    st.write({risk_label[i]: f"{proba:.2f}" for i, proba in enumerate(pred_proba)})

# ========== Section 2: Purpose Risk Overview ==========
elif section == "üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏° Purpose":
    st.header("üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Å‡∏π‡πâ")
    purposes = ['car', 'radio/TV', 'furniture', 'education', 'business', 'vacation', 'repairs', 'retraining']
    risk_levels = ['Low', 'Medium', 'High']
    n = 300
    df = pd.DataFrame({
        'Purpose': np.random.choice(purposes, n),
        'Credit amount': np.random.randint(1000, 20000, n),
        'Duration': np.random.randint(6, 48, n),
    })
    def simulate_risk(row):
        if row['Purpose'] in ['business', 'retraining'] or (row['Credit amount'] > 12000 and row['Duration'] > 24):
            return 'High'
        elif row['Credit amount'] > 7000:
            return 'Medium'
        else:
            return 'Low'
    df['Risk'] = df.apply(simulate_risk, axis=1)
    selected_purpose = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Å‡∏π‡πâ:", sorted(df['Purpose'].unique()))
    filtered_df = df[df['Purpose'] == selected_purpose]
    st.subheader(f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ '{selected_purpose}'")
    risk_counts = filtered_df['Risk'].value_counts().reindex(risk_levels, fill_value=0)
    st.bar_chart(risk_counts)

    st.subheader("üî§ WordCloud ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    purpose_text = ' '.join(df['Purpose'])
    wc = WordCloud(width=800, height=300, background_color='white').generate(purpose_text)
    fig, ax = plt.subplots()
    ax.imshow(wc, interpolation='bilinear')
    ax.axis('off')
    st.pyplot(fig)

    st.subheader("üîç ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ Purpose")
    fig2, ax2 = plt.subplots()
    sns.countplot(data=df, x='Purpose', order=df['Purpose'].value_counts().index, ax=ax2)
    plt.xticks(rotation=45)
    st.pyplot(fig2)

    st.subheader("üß† ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
    st.markdown("""
    - ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏ö‡πà‡∏≠‡∏¢: **business**, **retraining**
    - ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥: **radio/TV**, **furniture**, **vacation**
    - ‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ 'education' ‡∏´‡∏£‡∏∑‡∏≠ 'repairs' ‡∏°‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á ‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô
    """)
